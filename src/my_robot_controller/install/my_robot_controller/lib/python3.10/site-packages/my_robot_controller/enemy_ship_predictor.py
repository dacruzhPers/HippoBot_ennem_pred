from hashlib import algorithms_available
from geometry_msgs.msg import PoseArray, Point, Pose
from sensor_msgs.msg import PointCloud2
import copy
from rclpy.node import Node
import rclpy
import math

class EnemyShipPredictor(Node):

    def __init__(self):
        super().__init__('enemy_ship_predictor')
        self.subscription = self.create_subscription(PoseArray,'/wamv/ais_sensor/allies_position', self.enemy_ship_pose_callback,10)
        self.enemy_position = None
        self.prev_enemy_position = None
        self.time_interval = 0.1
        self.publisher = self.create_publisher(Pose, 'predicted_enemy_ship_pose', 10)

    def enemy_ship_pose_callback(self, msg):
        enemy_position = msg[0].position
        print(enemy_position.x)
        print(enemy_position.y)
        print(enemy_position.z)

        if self.enemy_position is None:
            self.enemy_position = enemy_position
            self.get_logger().info('Enemy''s initial position: (%f, %f, %f)' % (self.enemy_position.x, self.enemy_position.y, self.enemy_position.z))
        else:
            self.prev_enemy_position = self.enemy_position
            self_enemy_position = enemy_position
            predicted_enemy_pose = self.predict_enemy_position()
            self.publish_predicted_position(predicted_enemy_pose)
            self.get_logger().info('Enemy''s predicted position: (%f, %f, %f)' % (predicted_enemy_pose.position.x, predicted_enemy_pose.position.y, predicted_enemy_pose.position.z))

    def predict_enemy_position(self):
        if self.prev_enemy_position is not None:
            delta_x = self.enemy_position.x - self.prev_enemy_position.x
            delta_y = self.enemy_position.y - self.prev_enemy_position.y

            velocity_x = delta_x / self.time_interval
            velocity_y = delta_y / self.time_interval

            predicted_pose = Pose()
            predicted_pose.x = self.enemy_position.x + velocity_x * self.time_interval
            predicted_pose.y = self.enemy_position.y + velocity_y * self.time_interval

            return predicted_pose

    def publish_predicted_position(self, predicted_pose):
        self.publisher.publish(predicted_pose)

def main(args=None):
    rclpy.init(args=args)
    enemy_ship_predictor = EnemyShipPredictor()
    rclpy.spin(enemy_ship_predictor)
    enemy_ship_predictor.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
